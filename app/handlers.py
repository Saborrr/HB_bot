from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.database.models import Employee
from app.database.models import SessionLocal


router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
    text = (f"{message.from_user.full_name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å üòä\n"
            "/today - –ø–æ–∫–∞–∑–∞—Ç—å —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –î–†\n"
            "/months - —Å–ø–∏—Å–æ–∫ –î–† –ø–æ –º–µ—Å—è—Ü–∞–º"
            )
    await message.answer(text=text, reply_markup=await kb.inline_months())


@router.message(Command("months"))
async def birthdays_command(message: types.Message):
    keyboard = await kb.inline_months()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.isdigit())
async def birthdays_by_month(callback_query: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ,
    –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞.
    """
    month = int(callback_query.data)
    """
    –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    async with SessionLocal() as session:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.
        """
        employees = await Employee.get_by_month(session, month)
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    """
    if employees:
        employees.sort(key=lambda emp: emp.birth_date.day)
        text = "\n".join(
            [f"{emp.full_name} - {emp.birth_date.strftime('%d.%m.%Y')}"
             for emp in employees]
        )
    else:
        text = "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è."
    await callback_query.message.edit_text(text)


@router.message(Command("today"))
async def birthdays_today_command(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    async with SessionLocal() as session:
        employees = await Employee.get_by_today(session)
    if employees:
        employees.sort(key=lambda emp: emp.birth_date.day)
        text = "\n".join([f"{emp.full_name} - {emp.age} –ª–µ—Ç"
                          for emp in employees])
    else:
        text = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è."
    await message.answer(text)
