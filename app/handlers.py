from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from app.database.models import (Employee, calculate_age,
                                 find_employee_by_surname, SessionLocal,
                                 is_allowed)
from datetime import datetime as dt


router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    if not is_allowed(user_id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É ‚õîÔ∏è.")
    else:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
        text = (f"{message.from_user.full_name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å üòä\n"
                "/today - –ø–æ–∫–∞–∑–∞—Ç—å —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –î–†\n"
                "/months - —Å–ø–∏—Å–æ–∫ –î–† –ø–æ –º–µ—Å—è—Ü–∞–º\n"
                "/find –ò–≤–∞–Ω–æ–≤ - –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏\n"
                )
        await message.answer(text=text, reply_markup=await kb.inline_months())


@router.message(Command("months"))
async def birthdays_command(message: types.Message):
    keyboard = await kb.inline_months()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.isdigit())
async def birthdays_by_month(callback_query: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ,
    –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞.
    """
    month = int(callback_query.data)
    """
    –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    async with SessionLocal() as session:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.
        """
        employees = await Employee.get_by_month(session, month)
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    """
    if employees:
        employees.sort(key=lambda emp: emp.birth_date.day)
        text = "\n".join(
            [f"{emp.full_name} - {emp.birth_date.strftime('%d.%m.%Y')}"
             for emp in employees]
        )
    else:
        text = "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è."
    await callback_query.message.edit_text(text)


@router.message(Command("today"))
async def birthdays_today_command(message: types.Message):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    async with SessionLocal() as session:
        employees = await Employee.get_by_today(session)
    if employees:
        employees.sort(key=lambda emp: dt.strptime(
            emp.birth_date, '%d.%m.%Y').day)
        text = "\n".join([f"{emp.full_name} - {emp.age} –ª–µ—Ç"
                          for emp in employees])
    else:
        text = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è."
    await message.answer(text)


@router.message(Command("find"))
# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async def find_employee_command(message: types.Message):
    async with SessionLocal() as session:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "/find –ò–≤–∞–Ω–æ–≤ (—Ñ–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã)")
            return
        surname = parts[1].capitalize()
        # –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º `surname`
        employees = await find_employee_by_surname(session, surname)
        if employees:
            text = ""
            for emp in employees:
                birth_date = None
                try:
                    # –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–∞ '%d.%m.%Y', –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–î
                    if isinstance(emp.birth_date, str):
                        birth_date = dt.strptime(emp.birth_date, "%d.%m.%Y")
                    elif isinstance(emp.birth_date, dt):
                        birth_date = emp.birth_date
                except ValueError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")

                age = calculate_age(birth_date) if birth_date else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                calc_date = birth_date.strftime('%d.%m.%Y')
                calc_func = calc_date if birth_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                text += (f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {emp.full_name}\n"
                         f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {calc_func}\n"
                         f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n")
            await message.reply(text)
        else:
            await message.reply(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ñ–∞–º–∏–ª–∏–µ–π {surname} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")
